/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package utils;

import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.LinkedList;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextPane;
import p2p.CoUniverseMessage;
import p2p.MessageListener;
import p2p.MessageType;
import p2p.NetworkConnector;

/**
 *
 * @author maara
 */
public class DebugConsoleNamed extends javax.swing.JFrame {

    public static final String CONTROLLER_REPORT_MESSAGE_DESCRIPTOR = "CONTROLLER_REPORT_MESSAGE";
    final long startTime;

    private class TabView {
        
        public final static String DEFAULT_PANE_NAME = "<summary>";
        
        private final HashMap<String, TabView> tabs = new HashMap<>();
        private final JTabbedPane tabPane = new JTabbedPane();
        private final JTextPane textPane = new JTextPane();

        
        TabView() {
            JScrollPane scroll = new JScrollPane();
            
            scroll.setViewportView(textPane);
            
            tabPane.addTab(DEFAULT_PANE_NAME, scroll);
        }
        
        void addMessage(LinkedList<String> hierarchy, String text) {
            textPane.setText(
                    textPane.getText() + 
                    "\n" + 
                    "[" + (System.currentTimeMillis() - startTime) + "] " +
                    (hierarchy.isEmpty() ? "" : hierarchy + ": ") + 
                    text);

            String subName = hierarchy.poll();
            if (subName == null) return;
            
            
            TabView subView = tabs.get(subName);
                
            if (subView == null) {
                subView = new TabView();

                JTabbedPane subTabPane = subView.tabPane;
                tabs.put(subName, subView);
                tabPane.addTab(subName, subTabPane);
            }
            
            subView.addMessage(hierarchy, text);
        }
    }
    
    private final NetworkConnector connector;
    private final TabView tabView;
    
    /**
     * Creates new form ControllerOutputFrame
     */
    public DebugConsoleNamed(NetworkConnector connector) {
        this.connector = connector;
        this.startTime = System.currentTimeMillis();
        
        tabView = new TabView();
        
        coreTabbedPane = tabView.tabPane;

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Universe controller outputs:");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(coreTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(coreTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pack();
        
        
        if (connector == null) return;
        
        connector.addMessageListener(MessageType.DEBUG_LOG_MESSAGE, new MessageListener() {

            @Override
            public void onMessageArrived(CoUniverseMessage message) {
                
                LinkedList<String> hierarchy = (LinkedList<String>) message.content[0];
                String text = (String) message.content[1];
                
                addMessage(hierarchy, text);
            }
        });
    }
    
    public void addMessage(LinkedList<String> hierarchy, String text) {
        tabView.addMessage(hierarchy, text);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        coreTabbedPane = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Universe controller outputs:");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(coreTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 794, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(coreTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 486, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, InvocationTargetException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DebugConsoleNamed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DebugConsoleNamed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DebugConsoleNamed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DebugConsoleNamed.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        class MyRunnable implements Runnable {

            volatile DebugConsoleNamed cframe = null;
            
            @Override
            public void run() {
                cframe = new DebugConsoleNamed(null);
                cframe.setVisible(true);
            }            
        }
        
        final MyRunnable myrun = new MyRunnable();
        
        java.awt.EventQueue.invokeAndWait(myrun);
        
        for (int i = 0; i < 10; i++) {
            
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
            }

            for (int j = 0; j <= i; j++) {
                for (int k = j; k <= i; k++) {
                    java.awt.EventQueue.invokeAndWait( (new Runnable() {
                        private String appName, channelName, text;

                        public Runnable setParam(int i, int j, int k) {
                            appName = "Application " + j;
                            channelName = "Channel " + k;
                            text = "Message ID="+i;
                            return this;
                        }

                        @Override
                        public void run() {
                            myrun.cframe.addMessage(
                                new LinkedList<String>() {
                                    {
                                        add(appName);
                                        add(channelName);
                                    }
                                }, 
                                text);
                        }
                    } ).setParam(i, j, k));
                }
            }
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane coreTabbedPane;
    // End of variables declaration//GEN-END:variables
}
