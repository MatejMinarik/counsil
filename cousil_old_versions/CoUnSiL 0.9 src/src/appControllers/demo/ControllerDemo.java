/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package appControllers.demo;

import agc.PlanElementBean;
import appControllers.ApplicationEventListener;
import appControllers.Controller;
import core.Main;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.concurrent.ConcurrentLinkedDeque;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import mediaAppFactory.ApplicationFactory;
import mediaAppFactory.MediaApplication;
import mediaApplications.RumHD;
import org.apache.log4j.Logger;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import utils.ConfigUtils;

/**
 *
 * @author maara
 */
public class ControllerDemo extends javax.swing.JFrame {

    class ControlThread extends Thread {
        
        private final Deque<Object> deque = new ConcurrentLinkedDeque<>();
        
        private void issueCommand(Object command) {
            deque.offer(command);
        }
        
        
        
        public void startController() {
            issueCommand("START");
        }
        
        public void applyPatch(PlanElementBean patch) {
            issueCommand(patch);
        }
        
        public void stopController() {
            issueCommand("STOP");
        }
        
        @Override
        public void run() {
            while (true) {
                
            }
        }
        
    }
    
    private final ControlThread controllerThread = new ControlThread();
    
    public static final String CONFIG_FILE = "./nodeConfig.json";
    
    private final Controller controller;
    
    /**
     * Creates new form UltraGridConsumerDemo
     * @param controller Controller for the application to be tested
     */
    public ControllerDemo(Controller controller) {
        initComponents();
        this.controller = controller;
        setTitle(controller.getControllerName());
    }
    
    PlanElementBean.Target getTarget(JCheckBox check, JTextField ipField, JTextField portField, JTextField compressionField) {
        
        if (! check.isSelected()) return null;
        
        String ip = ipField.getText();
        String port = portField.getText();
        String compression = compressionField.getText();

        if (ip == null || ip.equals("") || port == null || port.equals("") || compression == null || compression.equals("")) {
            return null;
        }

        return new PlanElementBean.Target(ip, "this string is not important", compression, port);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        sourcePortTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        ipTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        portTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        checkBox1 = new javax.swing.JCheckBox();
        ipTextField2 = new javax.swing.JTextField();
        checkBox2 = new javax.swing.JCheckBox();
        portTextField2 = new javax.swing.JTextField();
        ipTextField3 = new javax.swing.JTextField();
        checkBox3 = new javax.swing.JCheckBox();
        portTextField3 = new javax.swing.JTextField();
        ipTextField4 = new javax.swing.JTextField();
        checkBox4 = new javax.swing.JCheckBox();
        portTextField4 = new javax.swing.JTextField();
        compressTextField1 = new javax.swing.JTextField();
        compressTextField2 = new javax.swing.JTextField();
        compressTextField3 = new javax.swing.JTextField();
        compressTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Receiving port:");

        sourcePortTextField1.setText("5050");
        sourcePortTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sourcePortTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("IP");

        ipTextField1.setText("127.0.0.1");

        jLabel4.setText("Port");

        portTextField1.setText("5050");

        jLabel5.setText("Compression");

        jButton1.setText("Issue plan");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        checkBox1.setSelected(true);

        ipTextField2.setText("127.0.0.1");

        portTextField2.setText("5054");
        portTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTextField2ActionPerformed(evt);
            }
        });

        ipTextField3.setText("127.0.0.1");

        portTextField3.setText("5058");

        ipTextField4.setText("127.0.0.1");

        portTextField4.setText("5062");
        portTextField4.setToolTipText("");

        compressTextField1.setText("none");

        compressTextField2.setText("none");

        compressTextField3.setText("none");

        compressTextField4.setText("none");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(checkBox4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ipTextField4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkBox3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ipTextField3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(checkBox2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ipTextField2))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(checkBox1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(ipTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(39, 39, 39)
                                    .addComponent(jLabel3))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(portTextField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(portTextField3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(portTextField4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(compressTextField2)
                                    .addComponent(compressTextField3)
                                    .addComponent(compressTextField4))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(compressTextField1)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(67, 67, 67))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sourcePortTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sourcePortTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBox1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBox2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBox3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ipTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkBox4)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compressTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compressTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compressTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compressTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(2, 2, 2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sourcePortTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sourcePortTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sourcePortTextField1ActionPerformed

    private void portTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_portTextField2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        String sourcePort = sourcePortTextField1.getText();
        PlanElementBean.Target t1 = getTarget(checkBox1, ipTextField1, portTextField1, compressTextField1), 
                               t2 = getTarget(checkBox2, ipTextField2, portTextField2, compressTextField2), 
                               t3 = getTarget(checkBox3, ipTextField3, portTextField3, compressTextField3), 
                               t4 = getTarget(checkBox4, ipTextField4, portTextField4, compressTextField4);
        
        PlanElementBean pe = new PlanElementBean();
        pe.setSourcePort(sourcePort);
        if (t1 != null) pe.addTarget(t1);
        if (t2 != null) pe.addTarget(t2);
        if (t3 != null) pe.addTarget(t3);
        if (t4 != null) pe.addTarget(t4);

        System.out.println("Applying patch: " + pe);
        
        try {
            controller.applyPatch(pe);
            System.out.println("Patch successfully applied");
        } catch (IOException ex) {
            System.err.println("Failed to apply patch - IOException thrown");
            ex.printStackTrace(System.err);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws JSONException {

        // Load appliocation templates
        appControllers.AppControllerPairing.initialize();

        JSONObject cfg = null;

        try {
            Logger.getLogger(Main.class).info("Loading configuration from "+CONFIG_FILE);
            cfg = ConfigUtils.loadConfig(CONFIG_FILE);
        } catch (FileNotFoundException ex) {
            //Logger.getLogger(Main.class.getName()).log(Level.FATAL, null, ex);
            System.err.println("Path \"" + CONFIG_FILE + "\" was not recognized as valid URL and thus interpreted as file path. However, CoUniverse was not able to load such file (" + ex.getMessage() + ").");
            System.exit(2);
        }

        Iterator<String> it = null;
        
        JSONObject templates = cfg.getJSONObject("applicationTemplates");
        LinkedList<String> nicknamesList = new LinkedList<>();
        it = templates.keys();
        while (it.hasNext()) {
            String key = it.next();
            nicknamesList.add(key);
        }
        
        Object[] nicknames = nicknamesList.toArray();
        if (nicknames.length < 1) throw new IllegalArgumentException("Failed to load available applications");
        
        // select template
        String s = (String)JOptionPane.showInputDialog(
                            null,
                            "Select application to run:",
                            "Demo config",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            nicknames,
                            nicknames[0]);

        //If a string was returned, say so.
        if (! ((s != null) && (s.length() > 0))) {
            throw new NullPointerException("Application selection failed! Selected item = " + s);
        }

        // instantiate application
        JSONObject appConfig = cfg.getJSONObject("applicationTemplates").getJSONObject(s);
        System.out.println("Selected application:");
        it = appConfig.keys();
        while (it.hasNext()) {
            String key = it.next();
            System.out.println("  " + key + " = " + appConfig.getString(key));
        }
        
        MediaApplication app = ApplicationFactory.newApplication(appConfig.getString("templateType"));
        System.out.println("Created application " + app);
        app.setupApplication(appConfig.getString("command"), appConfig.getString("arguments"));
        
        if (app instanceof RumHD) {
            RumHD rumHD = (RumHD) app;
            System.out.println("Creating controller for application " + rumHD + ":");
            System.out.println("  " + rumHD.getApplicationCmdOptions());
            System.out.println("  " + rumHD.getApplicationName());
            System.out.println("  " + rumHD.getApplicationPath());
            System.out.println("  " + rumHD.getPreferredReceivingPort());
            System.out.println("  " + rumHD.getShortDescription());
            System.out.println("  " + rumHD.getUuid());
            System.out.println("  " + rumHD.getCompressionFormats());
            System.out.println("  " + rumHD.getDecompressionFormats());
            try {
                System.out.println("  " + rumHD.reportStatus());
                System.out.println("  " + rumHD.activeConfig());
            } catch (JSONException ex) {
            }
        }
        
        final Controller controller = ApplicationFactory.newController(app);
        System.out.println("Created controller " + controller);
        
        try {
            controller.runApplication();
        } catch (IOException ex) {
            System.err.println("Failed to start application! Aborting");
            ex.printStackTrace(System.err);
            return;
        }
        System.out.println("Application started");
        
        ApplicationEventListener listener = new ApplicationEventListener() {
            @Override
            public void onCommandSent(Object command) {
                System.out.println("  MESSAGE >> " + command);
            }            
            
            public void onMessageReceived(Object message) {
                System.out.println("  MESSAGE << " + message);
            }
        };
        controller.registerApplicationStatusListener(listener);
        
        // ================
        // start controller
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControllerDemo(controller).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkBox1;
    private javax.swing.JCheckBox checkBox2;
    private javax.swing.JCheckBox checkBox3;
    private javax.swing.JCheckBox checkBox4;
    private javax.swing.JTextField compressTextField1;
    private javax.swing.JTextField compressTextField2;
    private javax.swing.JTextField compressTextField3;
    private javax.swing.JTextField compressTextField4;
    private javax.swing.JTextField ipTextField1;
    private javax.swing.JTextField ipTextField2;
    private javax.swing.JTextField ipTextField3;
    private javax.swing.JTextField ipTextField4;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField portTextField1;
    private javax.swing.JTextField portTextField2;
    private javax.swing.JTextField portTextField3;
    private javax.swing.JTextField portTextField4;
    private javax.swing.JTextField sourcePortTextField1;
    // End of variables declaration//GEN-END:variables
}
