/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package counsil;

import core.ControlPeer;
import core.Main;
import counsil.InvisibleOverlayFrame.StateEnum;
import java.awt.Color;
import java.awt.Graphics;
import java.io.Serializable;
import javax.swing.WindowConstants;
import networkRepresentation.EndpointNetworkNode;
import networkRepresentation.EndpointUserRole;
import p2p.CoUniverseMessage;
import p2p.MessageType;
import p2p.NetworkConnector;
import p2p.NodeGroupIdentifier;

/**
 *
 * @author Jarek Kala
 */
public class InvisibleOverlayFrame extends javax.swing.JFrame {

    private static final boolean debugUsingInvisibleOverlays = Main.getUniversePeer().getLocalNode().isDebugUsingInvisibleOverlays();

    public enum StateEnum {

        NORMAL,
        RAISING_HAND,
        TALKING,
    }

    private StateEnum state = StateEnum.NORMAL;
    private EndpointUserRole role;
    private final NetworkConnector networkConnector;
    private CounsilNetworkNodeLight endpointNetworkNode;

    private final boolean debug = false;

    /**
     * Creates new form NewJFrame
     */
    public InvisibleOverlayFrame() {

        if (debugUsingInvisibleOverlays) {
            setType(Type.UTILITY);
            setResizable(false);
            setUndecorated(true);
            setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            setAlwaysOnTop(true);
            setBackground(new Color(0, 0, 0, (float) 0.0025));
            initComponents();
            setVisible(true);
        }
        networkConnector = ControlPeer.getNetworkConnector();
    }

    public InvisibleOverlayFrame(CounsilNetworkNodeLight endpointNetworkNode) {
        this();
        this.role = endpointNetworkNode.getMyEndpointUserRole();
        this.endpointNetworkNode = endpointNetworkNode;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        if (role.equals("interpreter")) {
            if (state == StateEnum.TALKING) {
                giveRightToTalk();
                state = StateEnum.TALKING;
            } else if (state == StateEnum.TALKING) {
                takeRightToTalk();
                state = StateEnum.NORMAL;
            }
            repaint();
        }
    }//GEN-LAST:event_formMouseClicked

    @Override
    public void paint(Graphics g) {
        if (debugUsingInvisibleOverlays) {
            super.paint(g);

            if (debug) {
                g.setColor(Color.LIGHT_GRAY);
                drawBorder(g);
            }

            if (state == StateEnum.RAISING_HAND) {
                g.setColor(Color.RED);
                drawBorder(g);
            }

            if (state == StateEnum.TALKING) {
                g.setColor(Color.PINK);
                drawBorder(g);
            }
        }
    }

    private void drawBorder(Graphics g) {
        g.draw3DRect(0, 0, getWidth() - 1, getHeight() - 1, true);
        g.draw3DRect(1, 1, getWidth() - 3, getHeight() - 3, true);
        g.draw3DRect(2, 2, getWidth() - 5, getHeight() - 5, true);
    }

    public void resize(int x, int y, int width, int height) {
        setLocation(x, y);
        setSize(width, height);
        repaint();
    }

    public void close() {
        dispose();
    }

    public void raiseHand() {
        state = StateEnum.RAISING_HAND;
        repaint();
    }

    public void talk() {
        state = StateEnum.TALKING;
        repaint();
    }

    public void stopRaisingHand() {
        state = StateEnum.NORMAL;
        repaint();
    }

    public void stopTalking() {
        state = StateEnum.NORMAL;
        repaint();
    }

    private void giveRightToTalk() {
        networkConnector.sendMessageToGroup(new CoUniverseMessage(MessageType.COUNSIL_CAN_TALK, new Serializable[]{endpointNetworkNode}, networkConnector.getConnectorID(), null), NodeGroupIdentifier.ALL_NODES);
    }

    private void takeRightToTalk() {
        networkConnector.sendMessageToGroup(new CoUniverseMessage(MessageType.COUNSIL_CAN_NOT_TALK, new Serializable[]{endpointNetworkNode}, networkConnector.getConnectorID(), null), NodeGroupIdentifier.ALL_NODES);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvisibleOverlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvisibleOverlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvisibleOverlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvisibleOverlayFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvisibleOverlayFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
